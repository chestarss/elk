// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package http

import (
	json "encoding/json"
	uuid "github.com/google/uuid"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	badge "github.com/chestarss/elk/internal/pets/ent/badge"
	pet "github.com/chestarss/elk/internal/pets/ent/pet"
	playgroup "github.com/chestarss/elk/internal/pets/ent/playgroup"
	toy "github.com/chestarss/elk/internal/pets/ent/toy"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp(in *jlexer.Lexer, out *ToyUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "color":
			if in.IsNull() {
				in.Skip()
				out.Color = nil
			} else {
				if out.Color == nil {
					out.Color = new(toy.Color)
				}
				*out.Color = toy.Color(in.String())
			}
		case "material":
			if in.IsNull() {
				in.Skip()
				out.Material = nil
			} else {
				if out.Material == nil {
					out.Material = new(toy.Material)
				}
				*out.Material = toy.Material(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "owner":
			if in.IsNull() {
				in.Skip()
				out.Owner = nil
			} else {
				if out.Owner == nil {
					out.Owner = new(int)
				}
				*out.Owner = int(in.Int())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp(out *jwriter.Writer, in ToyUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix[1:])
		if in.Color == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Color))
		}
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		if in.Material == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Material))
		}
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		if in.Owner == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Owner))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ToyUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ToyUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp1(in *jlexer.Lexer, out *ToyCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "color":
			if in.IsNull() {
				in.Skip()
				out.Color = nil
			} else {
				if out.Color == nil {
					out.Color = new(toy.Color)
				}
				*out.Color = toy.Color(in.String())
			}
		case "material":
			if in.IsNull() {
				in.Skip()
				out.Material = nil
			} else {
				if out.Material == nil {
					out.Material = new(toy.Material)
				}
				*out.Material = toy.Material(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "owner":
			if in.IsNull() {
				in.Skip()
				out.Owner = nil
			} else {
				if out.Owner == nil {
					out.Owner = new(int)
				}
				*out.Owner = int(in.Int())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp1(out *jwriter.Writer, in ToyCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix[1:])
		if in.Color == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Color))
		}
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		if in.Material == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Material))
		}
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		if in.Owner == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Owner))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ToyCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ToyCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp1(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp2(in *jlexer.Lexer, out *Toy36157710Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Toy36157710Views, 0, 8)
			} else {
				*out = Toy36157710Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *Toy36157710View
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(Toy36157710View)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp2(out *jwriter.Writer, in Toy36157710Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Toy36157710Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Toy36157710Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp2(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp3(in *jlexer.Lexer, out *Toy36157710View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "color":
			out.Color = toy.Color(in.String())
		case "material":
			out.Material = toy.Material(in.String())
		case "title":
			out.Title = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp3(out *jwriter.Writer, in Toy36157710View) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	if in.Color != "" {
		const prefix string = ",\"color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Color))
	}
	if in.Material != "" {
		const prefix string = ",\"material\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Material))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Toy36157710View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Toy36157710View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp3(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp4(in *jlexer.Lexer, out *PlayGroupUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "weekday":
			if in.IsNull() {
				in.Skip()
				out.Weekday = nil
			} else {
				if out.Weekday == nil {
					out.Weekday = new(playgroup.Weekday)
				}
				*out.Weekday = playgroup.Weekday(in.String())
			}
		case "participants":
			if in.IsNull() {
				in.Skip()
				out.Participants = nil
			} else {
				in.Delim('[')
				if out.Participants == nil {
					if !in.IsDelim(']') {
						out.Participants = make([]int, 0, 8)
					} else {
						out.Participants = []int{}
					}
				} else {
					out.Participants = (out.Participants)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int
					v4 = int(in.Int())
					out.Participants = append(out.Participants, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp4(out *jwriter.Writer, in PlayGroupUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"weekday\":"
		out.RawString(prefix)
		if in.Weekday == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Weekday))
		}
	}
	{
		const prefix string = ",\"participants\":"
		out.RawString(prefix)
		if in.Participants == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Participants {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlayGroupUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlayGroupUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp4(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp5(in *jlexer.Lexer, out *PlayGroupCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "weekday":
			if in.IsNull() {
				in.Skip()
				out.Weekday = nil
			} else {
				if out.Weekday == nil {
					out.Weekday = new(playgroup.Weekday)
				}
				*out.Weekday = playgroup.Weekday(in.String())
			}
		case "participants":
			if in.IsNull() {
				in.Skip()
				out.Participants = nil
			} else {
				in.Delim('[')
				if out.Participants == nil {
					if !in.IsDelim(']') {
						out.Participants = make([]int, 0, 8)
					} else {
						out.Participants = []int{}
					}
				} else {
					out.Participants = (out.Participants)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int
					v7 = int(in.Int())
					out.Participants = append(out.Participants, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp5(out *jwriter.Writer, in PlayGroupCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"weekday\":"
		out.RawString(prefix)
		if in.Weekday == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Weekday))
		}
	}
	{
		const prefix string = ",\"participants\":"
		out.RawString(prefix)
		if in.Participants == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Participants {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlayGroupCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlayGroupCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp5(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp6(in *jlexer.Lexer, out *PlayGroup3432834655Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(PlayGroup3432834655Views, 0, 8)
			} else {
				*out = PlayGroup3432834655Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 *PlayGroup3432834655View
			if in.IsNull() {
				in.Skip()
				v10 = nil
			} else {
				if v10 == nil {
					v10 = new(PlayGroup3432834655View)
				}
				(*v10).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp6(out *jwriter.Writer, in PlayGroup3432834655Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			if v12 == nil {
				out.RawString("null")
			} else {
				(*v12).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlayGroup3432834655Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlayGroup3432834655Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp6(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp7(in *jlexer.Lexer, out *PlayGroup3432834655View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "weekday":
			out.Weekday = playgroup.Weekday(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp7(out *jwriter.Writer, in PlayGroup3432834655View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Weekday != "" {
		const prefix string = ",\"weekday\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Weekday))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlayGroup3432834655View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlayGroup3432834655View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp7(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp8(in *jlexer.Lexer, out *PetUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "height":
			if in.IsNull() {
				in.Skip()
				out.Height = nil
			} else {
				if out.Height == nil {
					out.Height = new(int)
				}
				*out.Height = int(in.Int())
			}
		case "weight":
			if in.IsNull() {
				in.Skip()
				out.Weight = nil
			} else {
				if out.Weight == nil {
					out.Weight = new(float64)
				}
				*out.Weight = float64(in.Float64())
			}
		case "castrated":
			if in.IsNull() {
				in.Skip()
				out.Castrated = nil
			} else {
				if out.Castrated == nil {
					out.Castrated = new(bool)
				}
				*out.Castrated = bool(in.Bool())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "birthday":
			if in.IsNull() {
				in.Skip()
				out.Birthday = nil
			} else {
				if out.Birthday == nil {
					out.Birthday = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Birthday).UnmarshalJSON(data))
				}
			}
		case "nicknames":
			if in.IsNull() {
				in.Skip()
				out.Nicknames = nil
			} else {
				if out.Nicknames == nil {
					out.Nicknames = new([]string)
				}
				if in.IsNull() {
					in.Skip()
					*out.Nicknames = nil
				} else {
					in.Delim('[')
					if *out.Nicknames == nil {
						if !in.IsDelim(']') {
							*out.Nicknames = make([]string, 0, 4)
						} else {
							*out.Nicknames = []string{}
						}
					} else {
						*out.Nicknames = (*out.Nicknames)[:0]
					}
					for !in.IsDelim(']') {
						var v13 string
						v13 = string(in.String())
						*out.Nicknames = append(*out.Nicknames, v13)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "chip":
			if in.IsNull() {
				in.Skip()
				out.Chip = nil
			} else {
				if out.Chip == nil {
					out.Chip = new(uuid.UUID)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.Chip).UnmarshalText(data))
				}
			}
		case "badge":
			if in.IsNull() {
				in.Skip()
				out.Badge = nil
			} else {
				if out.Badge == nil {
					out.Badge = new(uint32)
				}
				*out.Badge = uint32(in.Uint32())
			}
		case "protege":
			if in.IsNull() {
				in.Skip()
				out.Protege = nil
			} else {
				if out.Protege == nil {
					out.Protege = new(int)
				}
				*out.Protege = int(in.Int())
			}
		case "mentor":
			if in.IsNull() {
				in.Skip()
				out.Mentor = nil
			} else {
				if out.Mentor == nil {
					out.Mentor = new(int)
				}
				*out.Mentor = int(in.Int())
			}
		case "spouse":
			if in.IsNull() {
				in.Skip()
				out.Spouse = nil
			} else {
				if out.Spouse == nil {
					out.Spouse = new(int)
				}
				*out.Spouse = int(in.Int())
			}
		case "toys":
			if in.IsNull() {
				in.Skip()
				out.Toys = nil
			} else {
				in.Delim('[')
				if out.Toys == nil {
					if !in.IsDelim(']') {
						out.Toys = make([]uuid.UUID, 0, 4)
					} else {
						out.Toys = []uuid.UUID{}
					}
				} else {
					out.Toys = (out.Toys)[:0]
				}
				for !in.IsDelim(']') {
					var v14 uuid.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v14).UnmarshalText(data))
					}
					out.Toys = append(out.Toys, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parent":
			if in.IsNull() {
				in.Skip()
				out.Parent = nil
			} else {
				if out.Parent == nil {
					out.Parent = new(int)
				}
				*out.Parent = int(in.Int())
			}
		case "children":
			if in.IsNull() {
				in.Skip()
				out.Children = nil
			} else {
				in.Delim('[')
				if out.Children == nil {
					if !in.IsDelim(']') {
						out.Children = make([]int, 0, 8)
					} else {
						out.Children = []int{}
					}
				} else {
					out.Children = (out.Children)[:0]
				}
				for !in.IsDelim(']') {
					var v15 int
					v15 = int(in.Int())
					out.Children = append(out.Children, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "play_groups":
			if in.IsNull() {
				in.Skip()
				out.PlayGroups = nil
			} else {
				in.Delim('[')
				if out.PlayGroups == nil {
					if !in.IsDelim(']') {
						out.PlayGroups = make([]int, 0, 8)
					} else {
						out.PlayGroups = []int{}
					}
				} else {
					out.PlayGroups = (out.PlayGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v16 int
					v16 = int(in.Int())
					out.PlayGroups = append(out.PlayGroups, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "friends":
			if in.IsNull() {
				in.Skip()
				out.Friends = nil
			} else {
				in.Delim('[')
				if out.Friends == nil {
					if !in.IsDelim(']') {
						out.Friends = make([]int, 0, 8)
					} else {
						out.Friends = []int{}
					}
				} else {
					out.Friends = (out.Friends)[:0]
				}
				for !in.IsDelim(']') {
					var v17 int
					v17 = int(in.Int())
					out.Friends = append(out.Friends, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp8(out *jwriter.Writer, in PetUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix[1:])
		if in.Height == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Height))
		}
	}
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		if in.Weight == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Weight))
		}
	}
	{
		const prefix string = ",\"castrated\":"
		out.RawString(prefix)
		if in.Castrated == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Castrated))
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		if in.Birthday == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Birthday).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"nicknames\":"
		out.RawString(prefix)
		if in.Nicknames == nil {
			out.RawString("null")
		} else {
			if *in.Nicknames == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v18, v19 := range *in.Nicknames {
					if v18 > 0 {
						out.RawByte(',')
					}
					out.String(string(v19))
				}
				out.RawByte(']')
			}
		}
	}
	{
		const prefix string = ",\"chip\":"
		out.RawString(prefix)
		if in.Chip == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.Chip).MarshalText())
		}
	}
	{
		const prefix string = ",\"badge\":"
		out.RawString(prefix)
		if in.Badge == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.Badge))
		}
	}
	{
		const prefix string = ",\"protege\":"
		out.RawString(prefix)
		if in.Protege == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Protege))
		}
	}
	{
		const prefix string = ",\"mentor\":"
		out.RawString(prefix)
		if in.Mentor == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Mentor))
		}
	}
	{
		const prefix string = ",\"spouse\":"
		out.RawString(prefix)
		if in.Spouse == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Spouse))
		}
	}
	{
		const prefix string = ",\"toys\":"
		out.RawString(prefix)
		if in.Toys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Toys {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.RawText((v21).MarshalText())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		if in.Parent == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Parent))
		}
	}
	{
		const prefix string = ",\"children\":"
		out.RawString(prefix)
		if in.Children == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.Children {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v23))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"play_groups\":"
		out.RawString(prefix)
		if in.PlayGroups == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.PlayGroups {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v25))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"friends\":"
		out.RawString(prefix)
		if in.Friends == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Friends {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v27))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PetUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PetUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp8(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp9(in *jlexer.Lexer, out *PetCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "height":
			if in.IsNull() {
				in.Skip()
				out.Height = nil
			} else {
				if out.Height == nil {
					out.Height = new(int)
				}
				*out.Height = int(in.Int())
			}
		case "weight":
			if in.IsNull() {
				in.Skip()
				out.Weight = nil
			} else {
				if out.Weight == nil {
					out.Weight = new(float64)
				}
				*out.Weight = float64(in.Float64())
			}
		case "castrated":
			if in.IsNull() {
				in.Skip()
				out.Castrated = nil
			} else {
				if out.Castrated == nil {
					out.Castrated = new(bool)
				}
				*out.Castrated = bool(in.Bool())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "birthday":
			if in.IsNull() {
				in.Skip()
				out.Birthday = nil
			} else {
				if out.Birthday == nil {
					out.Birthday = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Birthday).UnmarshalJSON(data))
				}
			}
		case "nicknames":
			if in.IsNull() {
				in.Skip()
				out.Nicknames = nil
			} else {
				if out.Nicknames == nil {
					out.Nicknames = new([]string)
				}
				if in.IsNull() {
					in.Skip()
					*out.Nicknames = nil
				} else {
					in.Delim('[')
					if *out.Nicknames == nil {
						if !in.IsDelim(']') {
							*out.Nicknames = make([]string, 0, 4)
						} else {
							*out.Nicknames = []string{}
						}
					} else {
						*out.Nicknames = (*out.Nicknames)[:0]
					}
					for !in.IsDelim(']') {
						var v28 string
						v28 = string(in.String())
						*out.Nicknames = append(*out.Nicknames, v28)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "sex":
			if in.IsNull() {
				in.Skip()
				out.Sex = nil
			} else {
				if out.Sex == nil {
					out.Sex = new(pet.Sex)
				}
				*out.Sex = pet.Sex(in.String())
			}
		case "chip":
			if in.IsNull() {
				in.Skip()
				out.Chip = nil
			} else {
				if out.Chip == nil {
					out.Chip = new(uuid.UUID)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.Chip).UnmarshalText(data))
				}
			}
		case "badge":
			if in.IsNull() {
				in.Skip()
				out.Badge = nil
			} else {
				if out.Badge == nil {
					out.Badge = new(uint32)
				}
				*out.Badge = uint32(in.Uint32())
			}
		case "protege":
			if in.IsNull() {
				in.Skip()
				out.Protege = nil
			} else {
				if out.Protege == nil {
					out.Protege = new(int)
				}
				*out.Protege = int(in.Int())
			}
		case "mentor":
			if in.IsNull() {
				in.Skip()
				out.Mentor = nil
			} else {
				if out.Mentor == nil {
					out.Mentor = new(int)
				}
				*out.Mentor = int(in.Int())
			}
		case "spouse":
			if in.IsNull() {
				in.Skip()
				out.Spouse = nil
			} else {
				if out.Spouse == nil {
					out.Spouse = new(int)
				}
				*out.Spouse = int(in.Int())
			}
		case "toys":
			if in.IsNull() {
				in.Skip()
				out.Toys = nil
			} else {
				in.Delim('[')
				if out.Toys == nil {
					if !in.IsDelim(']') {
						out.Toys = make([]uuid.UUID, 0, 4)
					} else {
						out.Toys = []uuid.UUID{}
					}
				} else {
					out.Toys = (out.Toys)[:0]
				}
				for !in.IsDelim(']') {
					var v29 uuid.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v29).UnmarshalText(data))
					}
					out.Toys = append(out.Toys, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parent":
			if in.IsNull() {
				in.Skip()
				out.Parent = nil
			} else {
				if out.Parent == nil {
					out.Parent = new(int)
				}
				*out.Parent = int(in.Int())
			}
		case "children":
			if in.IsNull() {
				in.Skip()
				out.Children = nil
			} else {
				in.Delim('[')
				if out.Children == nil {
					if !in.IsDelim(']') {
						out.Children = make([]int, 0, 8)
					} else {
						out.Children = []int{}
					}
				} else {
					out.Children = (out.Children)[:0]
				}
				for !in.IsDelim(']') {
					var v30 int
					v30 = int(in.Int())
					out.Children = append(out.Children, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "play_groups":
			if in.IsNull() {
				in.Skip()
				out.PlayGroups = nil
			} else {
				in.Delim('[')
				if out.PlayGroups == nil {
					if !in.IsDelim(']') {
						out.PlayGroups = make([]int, 0, 8)
					} else {
						out.PlayGroups = []int{}
					}
				} else {
					out.PlayGroups = (out.PlayGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v31 int
					v31 = int(in.Int())
					out.PlayGroups = append(out.PlayGroups, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "friends":
			if in.IsNull() {
				in.Skip()
				out.Friends = nil
			} else {
				in.Delim('[')
				if out.Friends == nil {
					if !in.IsDelim(']') {
						out.Friends = make([]int, 0, 8)
					} else {
						out.Friends = []int{}
					}
				} else {
					out.Friends = (out.Friends)[:0]
				}
				for !in.IsDelim(']') {
					var v32 int
					v32 = int(in.Int())
					out.Friends = append(out.Friends, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp9(out *jwriter.Writer, in PetCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix[1:])
		if in.Height == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Height))
		}
	}
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		if in.Weight == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Weight))
		}
	}
	{
		const prefix string = ",\"castrated\":"
		out.RawString(prefix)
		if in.Castrated == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Castrated))
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		if in.Birthday == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Birthday).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"nicknames\":"
		out.RawString(prefix)
		if in.Nicknames == nil {
			out.RawString("null")
		} else {
			if *in.Nicknames == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v33, v34 := range *in.Nicknames {
					if v33 > 0 {
						out.RawByte(',')
					}
					out.String(string(v34))
				}
				out.RawByte(']')
			}
		}
	}
	{
		const prefix string = ",\"sex\":"
		out.RawString(prefix)
		if in.Sex == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Sex))
		}
	}
	{
		const prefix string = ",\"chip\":"
		out.RawString(prefix)
		if in.Chip == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.Chip).MarshalText())
		}
	}
	{
		const prefix string = ",\"badge\":"
		out.RawString(prefix)
		if in.Badge == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.Badge))
		}
	}
	{
		const prefix string = ",\"protege\":"
		out.RawString(prefix)
		if in.Protege == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Protege))
		}
	}
	{
		const prefix string = ",\"mentor\":"
		out.RawString(prefix)
		if in.Mentor == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Mentor))
		}
	}
	{
		const prefix string = ",\"spouse\":"
		out.RawString(prefix)
		if in.Spouse == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Spouse))
		}
	}
	{
		const prefix string = ",\"toys\":"
		out.RawString(prefix)
		if in.Toys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Toys {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.RawText((v36).MarshalText())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		if in.Parent == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Parent))
		}
	}
	{
		const prefix string = ",\"children\":"
		out.RawString(prefix)
		if in.Children == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v37, v38 := range in.Children {
				if v37 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v38))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"play_groups\":"
		out.RawString(prefix)
		if in.PlayGroups == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v39, v40 := range in.PlayGroups {
				if v39 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v40))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"friends\":"
		out.RawString(prefix)
		if in.Friends == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Friends {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v42))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PetCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PetCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp9(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp10(in *jlexer.Lexer, out *Pet45794832Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Pet45794832Views, 0, 8)
			} else {
				*out = Pet45794832Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v43 *Pet45794832View
			if in.IsNull() {
				in.Skip()
				v43 = nil
			} else {
				if v43 == nil {
					v43 = new(Pet45794832View)
				}
				(*v43).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v43)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp10(out *jwriter.Writer, in Pet45794832Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v44, v45 := range in {
			if v44 > 0 {
				out.RawByte(',')
			}
			if v45 == nil {
				out.RawString("null")
			} else {
				(*v45).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pet45794832Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pet45794832Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp10(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp11(in *jlexer.Lexer, out *Pet45794832View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "sex":
			out.Sex = pet.Sex(in.String())
		case "chip":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Chip).UnmarshalText(data))
			}
		case "badge":
			if in.IsNull() {
				in.Skip()
				out.Badge = nil
			} else {
				if out.Badge == nil {
					out.Badge = new(Badge2492344257View)
				}
				(*out.Badge).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp11(out *jwriter.Writer, in Pet45794832View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Sex != "" {
		const prefix string = ",\"sex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sex))
	}
	if true {
		const prefix string = ",\"chip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.Chip).MarshalText())
	}
	if in.Badge != nil {
		const prefix string = ",\"badge\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Badge).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pet45794832View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp11(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pet45794832View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp11(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp12(in *jlexer.Lexer, out *Pet340207500Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Pet340207500Views, 0, 8)
			} else {
				*out = Pet340207500Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v46 *Pet340207500View
			if in.IsNull() {
				in.Skip()
				v46 = nil
			} else {
				if v46 == nil {
					v46 = new(Pet340207500View)
				}
				(*v46).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v46)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp12(out *jwriter.Writer, in Pet340207500Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v47, v48 := range in {
			if v47 > 0 {
				out.RawByte(',')
			}
			if v48 == nil {
				out.RawString("null")
			} else {
				(*v48).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pet340207500Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp12(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pet340207500Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp12(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp13(in *jlexer.Lexer, out *Pet340207500View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		case "weight":
			out.Weight = float64(in.Float64())
		case "castrated":
			out.Castrated = bool(in.Bool())
		case "name":
			out.Name = string(in.String())
		case "birthday":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Birthday).UnmarshalJSON(data))
			}
		case "nicknames":
			if in.IsNull() {
				in.Skip()
				out.Nicknames = nil
			} else {
				in.Delim('[')
				if out.Nicknames == nil {
					if !in.IsDelim(']') {
						out.Nicknames = make([]string, 0, 4)
					} else {
						out.Nicknames = []string{}
					}
				} else {
					out.Nicknames = (out.Nicknames)[:0]
				}
				for !in.IsDelim(']') {
					var v49 string
					v49 = string(in.String())
					out.Nicknames = append(out.Nicknames, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sex":
			out.Sex = pet.Sex(in.String())
		case "chip":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Chip).UnmarshalText(data))
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp13(out *jwriter.Writer, in Pet340207500View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Weight))
	}
	if in.Castrated {
		const prefix string = ",\"castrated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Castrated))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if true {
		const prefix string = ",\"birthday\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Birthday).MarshalJSON())
	}
	if len(in.Nicknames) != 0 {
		const prefix string = ",\"nicknames\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v50, v51 := range in.Nicknames {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.String(string(v51))
			}
			out.RawByte(']')
		}
	}
	if in.Sex != "" {
		const prefix string = ",\"sex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sex))
	}
	if true {
		const prefix string = ",\"chip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.Chip).MarshalText())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pet340207500View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp13(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pet340207500View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp13(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp14(in *jlexer.Lexer, out *Pet3217017920Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Pet3217017920Views, 0, 8)
			} else {
				*out = Pet3217017920Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v52 *Pet3217017920View
			if in.IsNull() {
				in.Skip()
				v52 = nil
			} else {
				if v52 == nil {
					v52 = new(Pet3217017920View)
				}
				(*v52).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v52)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp14(out *jwriter.Writer, in Pet3217017920Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v53, v54 := range in {
			if v53 > 0 {
				out.RawByte(',')
			}
			if v54 == nil {
				out.RawString("null")
			} else {
				(*v54).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pet3217017920Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp14(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pet3217017920Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp14(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp15(in *jlexer.Lexer, out *Pet3217017920View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		case "weight":
			out.Weight = float64(in.Float64())
		case "castrated":
			out.Castrated = bool(in.Bool())
		case "name":
			out.Name = string(in.String())
		case "birthday":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Birthday).UnmarshalJSON(data))
			}
		case "nicknames":
			if in.IsNull() {
				in.Skip()
				out.Nicknames = nil
			} else {
				in.Delim('[')
				if out.Nicknames == nil {
					if !in.IsDelim(']') {
						out.Nicknames = make([]string, 0, 4)
					} else {
						out.Nicknames = []string{}
					}
				} else {
					out.Nicknames = (out.Nicknames)[:0]
				}
				for !in.IsDelim(']') {
					var v55 string
					v55 = string(in.String())
					out.Nicknames = append(out.Nicknames, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sex":
			out.Sex = pet.Sex(in.String())
		case "chip":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Chip).UnmarshalText(data))
			}
		case "badge":
			if in.IsNull() {
				in.Skip()
				out.Badge = nil
			} else {
				if out.Badge == nil {
					out.Badge = new(Badge2492344257View)
				}
				(*out.Badge).UnmarshalEasyJSON(in)
			}
		case "protege":
			if in.IsNull() {
				in.Skip()
				out.Protege = nil
			} else {
				if out.Protege == nil {
					out.Protege = new(Pet340207500View)
				}
				(*out.Protege).UnmarshalEasyJSON(in)
			}
		case "spouse":
			if in.IsNull() {
				in.Skip()
				out.Spouse = nil
			} else {
				if out.Spouse == nil {
					out.Spouse = new(Pet340207500View)
				}
				(*out.Spouse).UnmarshalEasyJSON(in)
			}
		case "toys":
			(out.Toys).UnmarshalEasyJSON(in)
		case "parent":
			if in.IsNull() {
				in.Skip()
				out.Parent = nil
			} else {
				if out.Parent == nil {
					out.Parent = new(Pet340207500View)
				}
				(*out.Parent).UnmarshalEasyJSON(in)
			}
		case "play_groups":
			(out.PlayGroups).UnmarshalEasyJSON(in)
		case "friends":
			(out.Friends).UnmarshalEasyJSON(in)
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp15(out *jwriter.Writer, in Pet3217017920View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Weight))
	}
	if in.Castrated {
		const prefix string = ",\"castrated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Castrated))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if true {
		const prefix string = ",\"birthday\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Birthday).MarshalJSON())
	}
	if len(in.Nicknames) != 0 {
		const prefix string = ",\"nicknames\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v56, v57 := range in.Nicknames {
				if v56 > 0 {
					out.RawByte(',')
				}
				out.String(string(v57))
			}
			out.RawByte(']')
		}
	}
	if in.Sex != "" {
		const prefix string = ",\"sex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sex))
	}
	if true {
		const prefix string = ",\"chip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.Chip).MarshalText())
	}
	if in.Badge != nil {
		const prefix string = ",\"badge\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Badge).MarshalEasyJSON(out)
	}
	if in.Protege != nil {
		const prefix string = ",\"protege\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Protege).MarshalEasyJSON(out)
	}
	if in.Spouse != nil {
		const prefix string = ",\"spouse\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Spouse).MarshalEasyJSON(out)
	}
	if len(in.Toys) != 0 {
		const prefix string = ",\"toys\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Toys).MarshalEasyJSON(out)
	}
	if in.Parent != nil {
		const prefix string = ",\"parent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Parent).MarshalEasyJSON(out)
	}
	if len(in.PlayGroups) != 0 {
		const prefix string = ",\"play_groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.PlayGroups).MarshalEasyJSON(out)
	}
	if len(in.Friends) != 0 {
		const prefix string = ",\"friends\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Friends).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pet3217017920View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp15(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pet3217017920View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp15(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp16(in *jlexer.Lexer, out *ErrResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "status":
			out.Status = string(in.String())
		case "errors":
			if m, ok := out.Errors.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Errors.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Errors = in.Interface()
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp16(out *jwriter.Writer, in ErrResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	if in.Errors != nil {
		const prefix string = ",\"errors\":"
		out.RawString(prefix)
		if m, ok := in.Errors.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Errors.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Errors))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp16(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp16(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp17(in *jlexer.Lexer, out *BadgeUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "color":
			if in.IsNull() {
				in.Skip()
				out.Color = nil
			} else {
				if out.Color == nil {
					out.Color = new(badge.Color)
				}
				*out.Color = badge.Color(in.String())
			}
		case "material":
			if in.IsNull() {
				in.Skip()
				out.Material = nil
			} else {
				if out.Material == nil {
					out.Material = new(badge.Material)
				}
				*out.Material = badge.Material(in.String())
			}
		case "wearer":
			if in.IsNull() {
				in.Skip()
				out.Wearer = nil
			} else {
				if out.Wearer == nil {
					out.Wearer = new(int)
				}
				*out.Wearer = int(in.Int())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp17(out *jwriter.Writer, in BadgeUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix[1:])
		if in.Color == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Color))
		}
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		if in.Material == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Material))
		}
	}
	{
		const prefix string = ",\"wearer\":"
		out.RawString(prefix)
		if in.Wearer == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Wearer))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BadgeUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp17(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BadgeUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp17(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp18(in *jlexer.Lexer, out *BadgeCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "color":
			if in.IsNull() {
				in.Skip()
				out.Color = nil
			} else {
				if out.Color == nil {
					out.Color = new(badge.Color)
				}
				*out.Color = badge.Color(in.String())
			}
		case "material":
			if in.IsNull() {
				in.Skip()
				out.Material = nil
			} else {
				if out.Material == nil {
					out.Material = new(badge.Material)
				}
				*out.Material = badge.Material(in.String())
			}
		case "wearer":
			if in.IsNull() {
				in.Skip()
				out.Wearer = nil
			} else {
				if out.Wearer == nil {
					out.Wearer = new(int)
				}
				*out.Wearer = int(in.Int())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp18(out *jwriter.Writer, in BadgeCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix[1:])
		if in.Color == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Color))
		}
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		if in.Material == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Material))
		}
	}
	{
		const prefix string = ",\"wearer\":"
		out.RawString(prefix)
		if in.Wearer == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Wearer))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BadgeCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp18(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BadgeCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp18(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp19(in *jlexer.Lexer, out *Badge2492344257Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Badge2492344257Views, 0, 8)
			} else {
				*out = Badge2492344257Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v58 *Badge2492344257View
			if in.IsNull() {
				in.Skip()
				v58 = nil
			} else {
				if v58 == nil {
					v58 = new(Badge2492344257View)
				}
				(*v58).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v58)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp19(out *jwriter.Writer, in Badge2492344257Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v59, v60 := range in {
			if v59 > 0 {
				out.RawByte(',')
			}
			if v60 == nil {
				out.RawString("null")
			} else {
				(*v60).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Badge2492344257Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp19(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Badge2492344257Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp19(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp20(in *jlexer.Lexer, out *Badge2492344257View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint32(in.Uint32())
		case "color":
			out.Color = badge.Color(in.String())
		case "material":
			out.Material = badge.Material(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp20(out *jwriter.Writer, in Badge2492344257View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	if in.Color != "" {
		const prefix string = ",\"color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Color))
	}
	if in.Material != "" {
		const prefix string = ",\"material\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Material))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Badge2492344257View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalPetsEntHttp20(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Badge2492344257View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalPetsEntHttp20(l, v)
}
