// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/chestarss/elk/internal/pets/ent/badge"
	"github.com/chestarss/elk/internal/pets/ent/pet"
	"github.com/chestarss/elk/internal/pets/ent/playgroup"
	"github.com/chestarss/elk/internal/pets/ent/toy"
)

// PetCreate is the builder for creating a Pet entity.
type PetCreate struct {
	config
	mutation *PetMutation
	hooks    []Hook
}

// SetHeight sets the "height" field.
func (pc *PetCreate) SetHeight(i int) *PetCreate {
	pc.mutation.SetHeight(i)
	return pc
}

// SetWeight sets the "weight" field.
func (pc *PetCreate) SetWeight(f float64) *PetCreate {
	pc.mutation.SetWeight(f)
	return pc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (pc *PetCreate) SetNillableWeight(f *float64) *PetCreate {
	if f != nil {
		pc.SetWeight(*f)
	}
	return pc
}

// SetCastrated sets the "castrated" field.
func (pc *PetCreate) SetCastrated(b bool) *PetCreate {
	pc.mutation.SetCastrated(b)
	return pc
}

// SetName sets the "name" field.
func (pc *PetCreate) SetName(s string) *PetCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetBirthday sets the "birthday" field.
func (pc *PetCreate) SetBirthday(t time.Time) *PetCreate {
	pc.mutation.SetBirthday(t)
	return pc
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (pc *PetCreate) SetNillableBirthday(t *time.Time) *PetCreate {
	if t != nil {
		pc.SetBirthday(*t)
	}
	return pc
}

// SetNicknames sets the "nicknames" field.
func (pc *PetCreate) SetNicknames(s []string) *PetCreate {
	pc.mutation.SetNicknames(s)
	return pc
}

// SetSex sets the "sex" field.
func (pc *PetCreate) SetSex(pe pet.Sex) *PetCreate {
	pc.mutation.SetSex(pe)
	return pc
}

// SetChip sets the "chip" field.
func (pc *PetCreate) SetChip(u uuid.UUID) *PetCreate {
	pc.mutation.SetChip(u)
	return pc
}

// SetBadgeID sets the "badge" edge to the Badge entity by ID.
func (pc *PetCreate) SetBadgeID(id uint32) *PetCreate {
	pc.mutation.SetBadgeID(id)
	return pc
}

// SetBadge sets the "badge" edge to the Badge entity.
func (pc *PetCreate) SetBadge(b *Badge) *PetCreate {
	return pc.SetBadgeID(b.ID)
}

// SetProtegeID sets the "protege" edge to the Pet entity by ID.
func (pc *PetCreate) SetProtegeID(id int) *PetCreate {
	pc.mutation.SetProtegeID(id)
	return pc
}

// SetNillableProtegeID sets the "protege" edge to the Pet entity by ID if the given value is not nil.
func (pc *PetCreate) SetNillableProtegeID(id *int) *PetCreate {
	if id != nil {
		pc = pc.SetProtegeID(*id)
	}
	return pc
}

// SetProtege sets the "protege" edge to the Pet entity.
func (pc *PetCreate) SetProtege(p *Pet) *PetCreate {
	return pc.SetProtegeID(p.ID)
}

// SetMentorID sets the "mentor" edge to the Pet entity by ID.
func (pc *PetCreate) SetMentorID(id int) *PetCreate {
	pc.mutation.SetMentorID(id)
	return pc
}

// SetNillableMentorID sets the "mentor" edge to the Pet entity by ID if the given value is not nil.
func (pc *PetCreate) SetNillableMentorID(id *int) *PetCreate {
	if id != nil {
		pc = pc.SetMentorID(*id)
	}
	return pc
}

// SetMentor sets the "mentor" edge to the Pet entity.
func (pc *PetCreate) SetMentor(p *Pet) *PetCreate {
	return pc.SetMentorID(p.ID)
}

// SetSpouseID sets the "spouse" edge to the Pet entity by ID.
func (pc *PetCreate) SetSpouseID(id int) *PetCreate {
	pc.mutation.SetSpouseID(id)
	return pc
}

// SetNillableSpouseID sets the "spouse" edge to the Pet entity by ID if the given value is not nil.
func (pc *PetCreate) SetNillableSpouseID(id *int) *PetCreate {
	if id != nil {
		pc = pc.SetSpouseID(*id)
	}
	return pc
}

// SetSpouse sets the "spouse" edge to the Pet entity.
func (pc *PetCreate) SetSpouse(p *Pet) *PetCreate {
	return pc.SetSpouseID(p.ID)
}

// AddToyIDs adds the "toys" edge to the Toy entity by IDs.
func (pc *PetCreate) AddToyIDs(ids ...uuid.UUID) *PetCreate {
	pc.mutation.AddToyIDs(ids...)
	return pc
}

// AddToys adds the "toys" edges to the Toy entity.
func (pc *PetCreate) AddToys(t ...*Toy) *PetCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddToyIDs(ids...)
}

// SetParentID sets the "parent" edge to the Pet entity by ID.
func (pc *PetCreate) SetParentID(id int) *PetCreate {
	pc.mutation.SetParentID(id)
	return pc
}

// SetNillableParentID sets the "parent" edge to the Pet entity by ID if the given value is not nil.
func (pc *PetCreate) SetNillableParentID(id *int) *PetCreate {
	if id != nil {
		pc = pc.SetParentID(*id)
	}
	return pc
}

// SetParent sets the "parent" edge to the Pet entity.
func (pc *PetCreate) SetParent(p *Pet) *PetCreate {
	return pc.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the Pet entity by IDs.
func (pc *PetCreate) AddChildIDs(ids ...int) *PetCreate {
	pc.mutation.AddChildIDs(ids...)
	return pc
}

// AddChildren adds the "children" edges to the Pet entity.
func (pc *PetCreate) AddChildren(p ...*Pet) *PetCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddChildIDs(ids...)
}

// AddPlayGroupIDs adds the "play_groups" edge to the PlayGroup entity by IDs.
func (pc *PetCreate) AddPlayGroupIDs(ids ...int) *PetCreate {
	pc.mutation.AddPlayGroupIDs(ids...)
	return pc
}

// AddPlayGroups adds the "play_groups" edges to the PlayGroup entity.
func (pc *PetCreate) AddPlayGroups(p ...*PlayGroup) *PetCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPlayGroupIDs(ids...)
}

// AddFriendIDs adds the "friends" edge to the Pet entity by IDs.
func (pc *PetCreate) AddFriendIDs(ids ...int) *PetCreate {
	pc.mutation.AddFriendIDs(ids...)
	return pc
}

// AddFriends adds the "friends" edges to the Pet entity.
func (pc *PetCreate) AddFriends(p ...*Pet) *PetCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddFriendIDs(ids...)
}

// Mutation returns the PetMutation object of the builder.
func (pc *PetCreate) Mutation() *PetMutation {
	return pc.mutation
}

// Save creates the Pet in the database.
func (pc *PetCreate) Save(ctx context.Context) (*Pet, error) {
	var (
		err  error
		node *Pet
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PetCreate) SaveX(ctx context.Context) *Pet {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PetCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PetCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PetCreate) defaults() {
	if _, ok := pc.mutation.Chip(); !ok {
		v := pet.DefaultChip()
		pc.mutation.SetChip(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PetCreate) check() error {
	if _, ok := pc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "height"`)}
	}
	if v, ok := pc.mutation.Height(); ok {
		if err := pet.HeightValidator(v); err != nil {
			return &ValidationError{Name: "height", err: fmt.Errorf(`ent: validator failed for field "height": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Weight(); ok {
		if err := pet.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`ent: validator failed for field "weight": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Castrated(); !ok {
		return &ValidationError{Name: "castrated", err: errors.New(`ent: missing required field "castrated"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := pet.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Sex(); !ok {
		return &ValidationError{Name: "sex", err: errors.New(`ent: missing required field "sex"`)}
	}
	if v, ok := pc.mutation.Sex(); ok {
		if err := pet.SexValidator(v); err != nil {
			return &ValidationError{Name: "sex", err: fmt.Errorf(`ent: validator failed for field "sex": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Chip(); !ok {
		return &ValidationError{Name: "chip", err: errors.New(`ent: missing required field "chip"`)}
	}
	if _, ok := pc.mutation.BadgeID(); !ok {
		return &ValidationError{Name: "badge", err: errors.New("ent: missing required edge \"badge\"")}
	}
	return nil
}

func (pc *PetCreate) sqlSave(ctx context.Context) (*Pet, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PetCreate) createSpec() (*Pet, *sqlgraph.CreateSpec) {
	var (
		_node = &Pet{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pet.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pet.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Height(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pet.FieldHeight,
		})
		_node.Height = value
	}
	if value, ok := pc.mutation.Weight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pet.FieldWeight,
		})
		_node.Weight = value
	}
	if value, ok := pc.mutation.Castrated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pet.FieldCastrated,
		})
		_node.Castrated = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pet.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.Birthday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pet.FieldBirthday,
		})
		_node.Birthday = value
	}
	if value, ok := pc.mutation.Nicknames(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: pet.FieldNicknames,
		})
		_node.Nicknames = value
	}
	if value, ok := pc.mutation.Sex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: pet.FieldSex,
		})
		_node.Sex = value
	}
	if value, ok := pc.mutation.Chip(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: pet.FieldChip,
		})
		_node.Chip = value
	}
	if nodes := pc.mutation.BadgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.BadgeTable,
			Columns: []string{pet.BadgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: badge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProtegeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pet.ProtegeTable,
			Columns: []string{pet.ProtegeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.pet_mentor = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.MentorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.MentorTable,
			Columns: []string{pet.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SpouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.SpouseTable,
			Columns: []string{pet.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.pet_spouse = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ToysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.ToysTable,
			Columns: []string{pet.ToysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pet.ParentTable,
			Columns: []string{pet.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.pet_children = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.ChildrenTable,
			Columns: []string{pet.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PlayGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pet.PlayGroupsTable,
			Columns: pet.PlayGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pet.FriendsTable,
			Columns: pet.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PetCreateBulk is the builder for creating many Pet entities in bulk.
type PetCreateBulk struct {
	config
	builders []*PetCreate
}

// Save creates the Pet entities in the database.
func (pcb *PetCreateBulk) Save(ctx context.Context) ([]*Pet, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pet, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PetCreateBulk) SaveX(ctx context.Context) []*Pet {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PetCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PetCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
