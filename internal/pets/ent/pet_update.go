// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/chestarss/elk/internal/pets/ent/badge"
	"github.com/chestarss/elk/internal/pets/ent/pet"
	"github.com/chestarss/elk/internal/pets/ent/playgroup"
	"github.com/chestarss/elk/internal/pets/ent/predicate"
	"github.com/chestarss/elk/internal/pets/ent/toy"
)

// PetUpdate is the builder for updating Pet entities.
type PetUpdate struct {
	config
	hooks    []Hook
	mutation *PetMutation
}

// Where appends a list predicates to the PetUpdate builder.
func (pu *PetUpdate) Where(ps ...predicate.Pet) *PetUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetHeight sets the "height" field.
func (pu *PetUpdate) SetHeight(i int) *PetUpdate {
	pu.mutation.ResetHeight()
	pu.mutation.SetHeight(i)
	return pu
}

// AddHeight adds i to the "height" field.
func (pu *PetUpdate) AddHeight(i int) *PetUpdate {
	pu.mutation.AddHeight(i)
	return pu
}

// SetWeight sets the "weight" field.
func (pu *PetUpdate) SetWeight(f float64) *PetUpdate {
	pu.mutation.ResetWeight()
	pu.mutation.SetWeight(f)
	return pu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (pu *PetUpdate) SetNillableWeight(f *float64) *PetUpdate {
	if f != nil {
		pu.SetWeight(*f)
	}
	return pu
}

// AddWeight adds f to the "weight" field.
func (pu *PetUpdate) AddWeight(f float64) *PetUpdate {
	pu.mutation.AddWeight(f)
	return pu
}

// ClearWeight clears the value of the "weight" field.
func (pu *PetUpdate) ClearWeight() *PetUpdate {
	pu.mutation.ClearWeight()
	return pu
}

// SetCastrated sets the "castrated" field.
func (pu *PetUpdate) SetCastrated(b bool) *PetUpdate {
	pu.mutation.SetCastrated(b)
	return pu
}

// SetName sets the "name" field.
func (pu *PetUpdate) SetName(s string) *PetUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetBirthday sets the "birthday" field.
func (pu *PetUpdate) SetBirthday(t time.Time) *PetUpdate {
	pu.mutation.SetBirthday(t)
	return pu
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (pu *PetUpdate) SetNillableBirthday(t *time.Time) *PetUpdate {
	if t != nil {
		pu.SetBirthday(*t)
	}
	return pu
}

// ClearBirthday clears the value of the "birthday" field.
func (pu *PetUpdate) ClearBirthday() *PetUpdate {
	pu.mutation.ClearBirthday()
	return pu
}

// SetNicknames sets the "nicknames" field.
func (pu *PetUpdate) SetNicknames(s []string) *PetUpdate {
	pu.mutation.SetNicknames(s)
	return pu
}

// ClearNicknames clears the value of the "nicknames" field.
func (pu *PetUpdate) ClearNicknames() *PetUpdate {
	pu.mutation.ClearNicknames()
	return pu
}

// SetChip sets the "chip" field.
func (pu *PetUpdate) SetChip(u uuid.UUID) *PetUpdate {
	pu.mutation.SetChip(u)
	return pu
}

// SetBadgeID sets the "badge" edge to the Badge entity by ID.
func (pu *PetUpdate) SetBadgeID(id uint32) *PetUpdate {
	pu.mutation.SetBadgeID(id)
	return pu
}

// SetBadge sets the "badge" edge to the Badge entity.
func (pu *PetUpdate) SetBadge(b *Badge) *PetUpdate {
	return pu.SetBadgeID(b.ID)
}

// SetProtegeID sets the "protege" edge to the Pet entity by ID.
func (pu *PetUpdate) SetProtegeID(id int) *PetUpdate {
	pu.mutation.SetProtegeID(id)
	return pu
}

// SetNillableProtegeID sets the "protege" edge to the Pet entity by ID if the given value is not nil.
func (pu *PetUpdate) SetNillableProtegeID(id *int) *PetUpdate {
	if id != nil {
		pu = pu.SetProtegeID(*id)
	}
	return pu
}

// SetProtege sets the "protege" edge to the Pet entity.
func (pu *PetUpdate) SetProtege(p *Pet) *PetUpdate {
	return pu.SetProtegeID(p.ID)
}

// SetMentorID sets the "mentor" edge to the Pet entity by ID.
func (pu *PetUpdate) SetMentorID(id int) *PetUpdate {
	pu.mutation.SetMentorID(id)
	return pu
}

// SetNillableMentorID sets the "mentor" edge to the Pet entity by ID if the given value is not nil.
func (pu *PetUpdate) SetNillableMentorID(id *int) *PetUpdate {
	if id != nil {
		pu = pu.SetMentorID(*id)
	}
	return pu
}

// SetMentor sets the "mentor" edge to the Pet entity.
func (pu *PetUpdate) SetMentor(p *Pet) *PetUpdate {
	return pu.SetMentorID(p.ID)
}

// SetSpouseID sets the "spouse" edge to the Pet entity by ID.
func (pu *PetUpdate) SetSpouseID(id int) *PetUpdate {
	pu.mutation.SetSpouseID(id)
	return pu
}

// SetNillableSpouseID sets the "spouse" edge to the Pet entity by ID if the given value is not nil.
func (pu *PetUpdate) SetNillableSpouseID(id *int) *PetUpdate {
	if id != nil {
		pu = pu.SetSpouseID(*id)
	}
	return pu
}

// SetSpouse sets the "spouse" edge to the Pet entity.
func (pu *PetUpdate) SetSpouse(p *Pet) *PetUpdate {
	return pu.SetSpouseID(p.ID)
}

// AddToyIDs adds the "toys" edge to the Toy entity by IDs.
func (pu *PetUpdate) AddToyIDs(ids ...uuid.UUID) *PetUpdate {
	pu.mutation.AddToyIDs(ids...)
	return pu
}

// AddToys adds the "toys" edges to the Toy entity.
func (pu *PetUpdate) AddToys(t ...*Toy) *PetUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddToyIDs(ids...)
}

// SetParentID sets the "parent" edge to the Pet entity by ID.
func (pu *PetUpdate) SetParentID(id int) *PetUpdate {
	pu.mutation.SetParentID(id)
	return pu
}

// SetNillableParentID sets the "parent" edge to the Pet entity by ID if the given value is not nil.
func (pu *PetUpdate) SetNillableParentID(id *int) *PetUpdate {
	if id != nil {
		pu = pu.SetParentID(*id)
	}
	return pu
}

// SetParent sets the "parent" edge to the Pet entity.
func (pu *PetUpdate) SetParent(p *Pet) *PetUpdate {
	return pu.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the Pet entity by IDs.
func (pu *PetUpdate) AddChildIDs(ids ...int) *PetUpdate {
	pu.mutation.AddChildIDs(ids...)
	return pu
}

// AddChildren adds the "children" edges to the Pet entity.
func (pu *PetUpdate) AddChildren(p ...*Pet) *PetUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddChildIDs(ids...)
}

// AddPlayGroupIDs adds the "play_groups" edge to the PlayGroup entity by IDs.
func (pu *PetUpdate) AddPlayGroupIDs(ids ...int) *PetUpdate {
	pu.mutation.AddPlayGroupIDs(ids...)
	return pu
}

// AddPlayGroups adds the "play_groups" edges to the PlayGroup entity.
func (pu *PetUpdate) AddPlayGroups(p ...*PlayGroup) *PetUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPlayGroupIDs(ids...)
}

// AddFriendIDs adds the "friends" edge to the Pet entity by IDs.
func (pu *PetUpdate) AddFriendIDs(ids ...int) *PetUpdate {
	pu.mutation.AddFriendIDs(ids...)
	return pu
}

// AddFriends adds the "friends" edges to the Pet entity.
func (pu *PetUpdate) AddFriends(p ...*Pet) *PetUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddFriendIDs(ids...)
}

// Mutation returns the PetMutation object of the builder.
func (pu *PetUpdate) Mutation() *PetMutation {
	return pu.mutation
}

// ClearBadge clears the "badge" edge to the Badge entity.
func (pu *PetUpdate) ClearBadge() *PetUpdate {
	pu.mutation.ClearBadge()
	return pu
}

// ClearProtege clears the "protege" edge to the Pet entity.
func (pu *PetUpdate) ClearProtege() *PetUpdate {
	pu.mutation.ClearProtege()
	return pu
}

// ClearMentor clears the "mentor" edge to the Pet entity.
func (pu *PetUpdate) ClearMentor() *PetUpdate {
	pu.mutation.ClearMentor()
	return pu
}

// ClearSpouse clears the "spouse" edge to the Pet entity.
func (pu *PetUpdate) ClearSpouse() *PetUpdate {
	pu.mutation.ClearSpouse()
	return pu
}

// ClearToys clears all "toys" edges to the Toy entity.
func (pu *PetUpdate) ClearToys() *PetUpdate {
	pu.mutation.ClearToys()
	return pu
}

// RemoveToyIDs removes the "toys" edge to Toy entities by IDs.
func (pu *PetUpdate) RemoveToyIDs(ids ...uuid.UUID) *PetUpdate {
	pu.mutation.RemoveToyIDs(ids...)
	return pu
}

// RemoveToys removes "toys" edges to Toy entities.
func (pu *PetUpdate) RemoveToys(t ...*Toy) *PetUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveToyIDs(ids...)
}

// ClearParent clears the "parent" edge to the Pet entity.
func (pu *PetUpdate) ClearParent() *PetUpdate {
	pu.mutation.ClearParent()
	return pu
}

// ClearChildren clears all "children" edges to the Pet entity.
func (pu *PetUpdate) ClearChildren() *PetUpdate {
	pu.mutation.ClearChildren()
	return pu
}

// RemoveChildIDs removes the "children" edge to Pet entities by IDs.
func (pu *PetUpdate) RemoveChildIDs(ids ...int) *PetUpdate {
	pu.mutation.RemoveChildIDs(ids...)
	return pu
}

// RemoveChildren removes "children" edges to Pet entities.
func (pu *PetUpdate) RemoveChildren(p ...*Pet) *PetUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveChildIDs(ids...)
}

// ClearPlayGroups clears all "play_groups" edges to the PlayGroup entity.
func (pu *PetUpdate) ClearPlayGroups() *PetUpdate {
	pu.mutation.ClearPlayGroups()
	return pu
}

// RemovePlayGroupIDs removes the "play_groups" edge to PlayGroup entities by IDs.
func (pu *PetUpdate) RemovePlayGroupIDs(ids ...int) *PetUpdate {
	pu.mutation.RemovePlayGroupIDs(ids...)
	return pu
}

// RemovePlayGroups removes "play_groups" edges to PlayGroup entities.
func (pu *PetUpdate) RemovePlayGroups(p ...*PlayGroup) *PetUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePlayGroupIDs(ids...)
}

// ClearFriends clears all "friends" edges to the Pet entity.
func (pu *PetUpdate) ClearFriends() *PetUpdate {
	pu.mutation.ClearFriends()
	return pu
}

// RemoveFriendIDs removes the "friends" edge to Pet entities by IDs.
func (pu *PetUpdate) RemoveFriendIDs(ids ...int) *PetUpdate {
	pu.mutation.RemoveFriendIDs(ids...)
	return pu
}

// RemoveFriends removes "friends" edges to Pet entities.
func (pu *PetUpdate) RemoveFriends(p ...*Pet) *PetUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveFriendIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PetUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PetUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PetUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PetUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PetUpdate) check() error {
	if v, ok := pu.mutation.Height(); ok {
		if err := pet.HeightValidator(v); err != nil {
			return &ValidationError{Name: "height", err: fmt.Errorf("ent: validator failed for field \"height\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Weight(); ok {
		if err := pet.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf("ent: validator failed for field \"weight\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := pet.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := pu.mutation.BadgeID(); pu.mutation.BadgeCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"badge\"")
	}
	return nil
}

func (pu *PetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pet.Table,
			Columns: pet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pet.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pet.FieldHeight,
		})
	}
	if value, ok := pu.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pet.FieldHeight,
		})
	}
	if value, ok := pu.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pet.FieldWeight,
		})
	}
	if value, ok := pu.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pet.FieldWeight,
		})
	}
	if pu.mutation.WeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: pet.FieldWeight,
		})
	}
	if value, ok := pu.mutation.Castrated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pet.FieldCastrated,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pet.FieldName,
		})
	}
	if value, ok := pu.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pet.FieldBirthday,
		})
	}
	if pu.mutation.BirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pet.FieldBirthday,
		})
	}
	if value, ok := pu.mutation.Nicknames(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: pet.FieldNicknames,
		})
	}
	if pu.mutation.NicknamesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: pet.FieldNicknames,
		})
	}
	if value, ok := pu.mutation.Chip(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: pet.FieldChip,
		})
	}
	if pu.mutation.BadgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.BadgeTable,
			Columns: []string{pet.BadgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: badge.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BadgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.BadgeTable,
			Columns: []string{pet.BadgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: badge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProtegeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pet.ProtegeTable,
			Columns: []string{pet.ProtegeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProtegeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pet.ProtegeTable,
			Columns: []string{pet.ProtegeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MentorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.MentorTable,
			Columns: []string{pet.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MentorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.MentorTable,
			Columns: []string{pet.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SpouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.SpouseTable,
			Columns: []string{pet.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SpouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.SpouseTable,
			Columns: []string{pet.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ToysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.ToysTable,
			Columns: []string{pet.ToysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedToysIDs(); len(nodes) > 0 && !pu.mutation.ToysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.ToysTable,
			Columns: []string{pet.ToysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ToysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.ToysTable,
			Columns: []string{pet.ToysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pet.ParentTable,
			Columns: []string{pet.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pet.ParentTable,
			Columns: []string{pet.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.ChildrenTable,
			Columns: []string{pet.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.ChildrenTable,
			Columns: []string{pet.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.ChildrenTable,
			Columns: []string{pet.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PlayGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pet.PlayGroupsTable,
			Columns: pet.PlayGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPlayGroupsIDs(); len(nodes) > 0 && !pu.mutation.PlayGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pet.PlayGroupsTable,
			Columns: pet.PlayGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PlayGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pet.PlayGroupsTable,
			Columns: pet.PlayGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pet.FriendsTable,
			Columns: pet.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFriendsIDs(); len(nodes) > 0 && !pu.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pet.FriendsTable,
			Columns: pet.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pet.FriendsTable,
			Columns: pet.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PetUpdateOne is the builder for updating a single Pet entity.
type PetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PetMutation
}

// SetHeight sets the "height" field.
func (puo *PetUpdateOne) SetHeight(i int) *PetUpdateOne {
	puo.mutation.ResetHeight()
	puo.mutation.SetHeight(i)
	return puo
}

// AddHeight adds i to the "height" field.
func (puo *PetUpdateOne) AddHeight(i int) *PetUpdateOne {
	puo.mutation.AddHeight(i)
	return puo
}

// SetWeight sets the "weight" field.
func (puo *PetUpdateOne) SetWeight(f float64) *PetUpdateOne {
	puo.mutation.ResetWeight()
	puo.mutation.SetWeight(f)
	return puo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableWeight(f *float64) *PetUpdateOne {
	if f != nil {
		puo.SetWeight(*f)
	}
	return puo
}

// AddWeight adds f to the "weight" field.
func (puo *PetUpdateOne) AddWeight(f float64) *PetUpdateOne {
	puo.mutation.AddWeight(f)
	return puo
}

// ClearWeight clears the value of the "weight" field.
func (puo *PetUpdateOne) ClearWeight() *PetUpdateOne {
	puo.mutation.ClearWeight()
	return puo
}

// SetCastrated sets the "castrated" field.
func (puo *PetUpdateOne) SetCastrated(b bool) *PetUpdateOne {
	puo.mutation.SetCastrated(b)
	return puo
}

// SetName sets the "name" field.
func (puo *PetUpdateOne) SetName(s string) *PetUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetBirthday sets the "birthday" field.
func (puo *PetUpdateOne) SetBirthday(t time.Time) *PetUpdateOne {
	puo.mutation.SetBirthday(t)
	return puo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableBirthday(t *time.Time) *PetUpdateOne {
	if t != nil {
		puo.SetBirthday(*t)
	}
	return puo
}

// ClearBirthday clears the value of the "birthday" field.
func (puo *PetUpdateOne) ClearBirthday() *PetUpdateOne {
	puo.mutation.ClearBirthday()
	return puo
}

// SetNicknames sets the "nicknames" field.
func (puo *PetUpdateOne) SetNicknames(s []string) *PetUpdateOne {
	puo.mutation.SetNicknames(s)
	return puo
}

// ClearNicknames clears the value of the "nicknames" field.
func (puo *PetUpdateOne) ClearNicknames() *PetUpdateOne {
	puo.mutation.ClearNicknames()
	return puo
}

// SetChip sets the "chip" field.
func (puo *PetUpdateOne) SetChip(u uuid.UUID) *PetUpdateOne {
	puo.mutation.SetChip(u)
	return puo
}

// SetBadgeID sets the "badge" edge to the Badge entity by ID.
func (puo *PetUpdateOne) SetBadgeID(id uint32) *PetUpdateOne {
	puo.mutation.SetBadgeID(id)
	return puo
}

// SetBadge sets the "badge" edge to the Badge entity.
func (puo *PetUpdateOne) SetBadge(b *Badge) *PetUpdateOne {
	return puo.SetBadgeID(b.ID)
}

// SetProtegeID sets the "protege" edge to the Pet entity by ID.
func (puo *PetUpdateOne) SetProtegeID(id int) *PetUpdateOne {
	puo.mutation.SetProtegeID(id)
	return puo
}

// SetNillableProtegeID sets the "protege" edge to the Pet entity by ID if the given value is not nil.
func (puo *PetUpdateOne) SetNillableProtegeID(id *int) *PetUpdateOne {
	if id != nil {
		puo = puo.SetProtegeID(*id)
	}
	return puo
}

// SetProtege sets the "protege" edge to the Pet entity.
func (puo *PetUpdateOne) SetProtege(p *Pet) *PetUpdateOne {
	return puo.SetProtegeID(p.ID)
}

// SetMentorID sets the "mentor" edge to the Pet entity by ID.
func (puo *PetUpdateOne) SetMentorID(id int) *PetUpdateOne {
	puo.mutation.SetMentorID(id)
	return puo
}

// SetNillableMentorID sets the "mentor" edge to the Pet entity by ID if the given value is not nil.
func (puo *PetUpdateOne) SetNillableMentorID(id *int) *PetUpdateOne {
	if id != nil {
		puo = puo.SetMentorID(*id)
	}
	return puo
}

// SetMentor sets the "mentor" edge to the Pet entity.
func (puo *PetUpdateOne) SetMentor(p *Pet) *PetUpdateOne {
	return puo.SetMentorID(p.ID)
}

// SetSpouseID sets the "spouse" edge to the Pet entity by ID.
func (puo *PetUpdateOne) SetSpouseID(id int) *PetUpdateOne {
	puo.mutation.SetSpouseID(id)
	return puo
}

// SetNillableSpouseID sets the "spouse" edge to the Pet entity by ID if the given value is not nil.
func (puo *PetUpdateOne) SetNillableSpouseID(id *int) *PetUpdateOne {
	if id != nil {
		puo = puo.SetSpouseID(*id)
	}
	return puo
}

// SetSpouse sets the "spouse" edge to the Pet entity.
func (puo *PetUpdateOne) SetSpouse(p *Pet) *PetUpdateOne {
	return puo.SetSpouseID(p.ID)
}

// AddToyIDs adds the "toys" edge to the Toy entity by IDs.
func (puo *PetUpdateOne) AddToyIDs(ids ...uuid.UUID) *PetUpdateOne {
	puo.mutation.AddToyIDs(ids...)
	return puo
}

// AddToys adds the "toys" edges to the Toy entity.
func (puo *PetUpdateOne) AddToys(t ...*Toy) *PetUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddToyIDs(ids...)
}

// SetParentID sets the "parent" edge to the Pet entity by ID.
func (puo *PetUpdateOne) SetParentID(id int) *PetUpdateOne {
	puo.mutation.SetParentID(id)
	return puo
}

// SetNillableParentID sets the "parent" edge to the Pet entity by ID if the given value is not nil.
func (puo *PetUpdateOne) SetNillableParentID(id *int) *PetUpdateOne {
	if id != nil {
		puo = puo.SetParentID(*id)
	}
	return puo
}

// SetParent sets the "parent" edge to the Pet entity.
func (puo *PetUpdateOne) SetParent(p *Pet) *PetUpdateOne {
	return puo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the Pet entity by IDs.
func (puo *PetUpdateOne) AddChildIDs(ids ...int) *PetUpdateOne {
	puo.mutation.AddChildIDs(ids...)
	return puo
}

// AddChildren adds the "children" edges to the Pet entity.
func (puo *PetUpdateOne) AddChildren(p ...*Pet) *PetUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddChildIDs(ids...)
}

// AddPlayGroupIDs adds the "play_groups" edge to the PlayGroup entity by IDs.
func (puo *PetUpdateOne) AddPlayGroupIDs(ids ...int) *PetUpdateOne {
	puo.mutation.AddPlayGroupIDs(ids...)
	return puo
}

// AddPlayGroups adds the "play_groups" edges to the PlayGroup entity.
func (puo *PetUpdateOne) AddPlayGroups(p ...*PlayGroup) *PetUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPlayGroupIDs(ids...)
}

// AddFriendIDs adds the "friends" edge to the Pet entity by IDs.
func (puo *PetUpdateOne) AddFriendIDs(ids ...int) *PetUpdateOne {
	puo.mutation.AddFriendIDs(ids...)
	return puo
}

// AddFriends adds the "friends" edges to the Pet entity.
func (puo *PetUpdateOne) AddFriends(p ...*Pet) *PetUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddFriendIDs(ids...)
}

// Mutation returns the PetMutation object of the builder.
func (puo *PetUpdateOne) Mutation() *PetMutation {
	return puo.mutation
}

// ClearBadge clears the "badge" edge to the Badge entity.
func (puo *PetUpdateOne) ClearBadge() *PetUpdateOne {
	puo.mutation.ClearBadge()
	return puo
}

// ClearProtege clears the "protege" edge to the Pet entity.
func (puo *PetUpdateOne) ClearProtege() *PetUpdateOne {
	puo.mutation.ClearProtege()
	return puo
}

// ClearMentor clears the "mentor" edge to the Pet entity.
func (puo *PetUpdateOne) ClearMentor() *PetUpdateOne {
	puo.mutation.ClearMentor()
	return puo
}

// ClearSpouse clears the "spouse" edge to the Pet entity.
func (puo *PetUpdateOne) ClearSpouse() *PetUpdateOne {
	puo.mutation.ClearSpouse()
	return puo
}

// ClearToys clears all "toys" edges to the Toy entity.
func (puo *PetUpdateOne) ClearToys() *PetUpdateOne {
	puo.mutation.ClearToys()
	return puo
}

// RemoveToyIDs removes the "toys" edge to Toy entities by IDs.
func (puo *PetUpdateOne) RemoveToyIDs(ids ...uuid.UUID) *PetUpdateOne {
	puo.mutation.RemoveToyIDs(ids...)
	return puo
}

// RemoveToys removes "toys" edges to Toy entities.
func (puo *PetUpdateOne) RemoveToys(t ...*Toy) *PetUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveToyIDs(ids...)
}

// ClearParent clears the "parent" edge to the Pet entity.
func (puo *PetUpdateOne) ClearParent() *PetUpdateOne {
	puo.mutation.ClearParent()
	return puo
}

// ClearChildren clears all "children" edges to the Pet entity.
func (puo *PetUpdateOne) ClearChildren() *PetUpdateOne {
	puo.mutation.ClearChildren()
	return puo
}

// RemoveChildIDs removes the "children" edge to Pet entities by IDs.
func (puo *PetUpdateOne) RemoveChildIDs(ids ...int) *PetUpdateOne {
	puo.mutation.RemoveChildIDs(ids...)
	return puo
}

// RemoveChildren removes "children" edges to Pet entities.
func (puo *PetUpdateOne) RemoveChildren(p ...*Pet) *PetUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveChildIDs(ids...)
}

// ClearPlayGroups clears all "play_groups" edges to the PlayGroup entity.
func (puo *PetUpdateOne) ClearPlayGroups() *PetUpdateOne {
	puo.mutation.ClearPlayGroups()
	return puo
}

// RemovePlayGroupIDs removes the "play_groups" edge to PlayGroup entities by IDs.
func (puo *PetUpdateOne) RemovePlayGroupIDs(ids ...int) *PetUpdateOne {
	puo.mutation.RemovePlayGroupIDs(ids...)
	return puo
}

// RemovePlayGroups removes "play_groups" edges to PlayGroup entities.
func (puo *PetUpdateOne) RemovePlayGroups(p ...*PlayGroup) *PetUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePlayGroupIDs(ids...)
}

// ClearFriends clears all "friends" edges to the Pet entity.
func (puo *PetUpdateOne) ClearFriends() *PetUpdateOne {
	puo.mutation.ClearFriends()
	return puo
}

// RemoveFriendIDs removes the "friends" edge to Pet entities by IDs.
func (puo *PetUpdateOne) RemoveFriendIDs(ids ...int) *PetUpdateOne {
	puo.mutation.RemoveFriendIDs(ids...)
	return puo
}

// RemoveFriends removes "friends" edges to Pet entities.
func (puo *PetUpdateOne) RemoveFriends(p ...*Pet) *PetUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveFriendIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PetUpdateOne) Select(field string, fields ...string) *PetUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pet entity.
func (puo *PetUpdateOne) Save(ctx context.Context) (*Pet, error) {
	var (
		err  error
		node *Pet
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PetUpdateOne) SaveX(ctx context.Context) *Pet {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PetUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PetUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PetUpdateOne) check() error {
	if v, ok := puo.mutation.Height(); ok {
		if err := pet.HeightValidator(v); err != nil {
			return &ValidationError{Name: "height", err: fmt.Errorf("ent: validator failed for field \"height\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Weight(); ok {
		if err := pet.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf("ent: validator failed for field \"weight\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := pet.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := puo.mutation.BadgeID(); puo.mutation.BadgeCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"badge\"")
	}
	return nil
}

func (puo *PetUpdateOne) sqlSave(ctx context.Context) (_node *Pet, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pet.Table,
			Columns: pet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pet.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Pet.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pet.FieldID)
		for _, f := range fields {
			if !pet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pet.FieldHeight,
		})
	}
	if value, ok := puo.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pet.FieldHeight,
		})
	}
	if value, ok := puo.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pet.FieldWeight,
		})
	}
	if value, ok := puo.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pet.FieldWeight,
		})
	}
	if puo.mutation.WeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: pet.FieldWeight,
		})
	}
	if value, ok := puo.mutation.Castrated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pet.FieldCastrated,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pet.FieldName,
		})
	}
	if value, ok := puo.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pet.FieldBirthday,
		})
	}
	if puo.mutation.BirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pet.FieldBirthday,
		})
	}
	if value, ok := puo.mutation.Nicknames(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: pet.FieldNicknames,
		})
	}
	if puo.mutation.NicknamesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: pet.FieldNicknames,
		})
	}
	if value, ok := puo.mutation.Chip(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: pet.FieldChip,
		})
	}
	if puo.mutation.BadgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.BadgeTable,
			Columns: []string{pet.BadgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: badge.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BadgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.BadgeTable,
			Columns: []string{pet.BadgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: badge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProtegeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pet.ProtegeTable,
			Columns: []string{pet.ProtegeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProtegeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pet.ProtegeTable,
			Columns: []string{pet.ProtegeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MentorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.MentorTable,
			Columns: []string{pet.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MentorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.MentorTable,
			Columns: []string{pet.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SpouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.SpouseTable,
			Columns: []string{pet.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SpouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.SpouseTable,
			Columns: []string{pet.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ToysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.ToysTable,
			Columns: []string{pet.ToysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedToysIDs(); len(nodes) > 0 && !puo.mutation.ToysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.ToysTable,
			Columns: []string{pet.ToysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ToysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.ToysTable,
			Columns: []string{pet.ToysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pet.ParentTable,
			Columns: []string{pet.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pet.ParentTable,
			Columns: []string{pet.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.ChildrenTable,
			Columns: []string{pet.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !puo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.ChildrenTable,
			Columns: []string{pet.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.ChildrenTable,
			Columns: []string{pet.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PlayGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pet.PlayGroupsTable,
			Columns: pet.PlayGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPlayGroupsIDs(); len(nodes) > 0 && !puo.mutation.PlayGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pet.PlayGroupsTable,
			Columns: pet.PlayGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PlayGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pet.PlayGroupsTable,
			Columns: pet.PlayGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pet.FriendsTable,
			Columns: pet.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFriendsIDs(); len(nodes) > 0 && !puo.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pet.FriendsTable,
			Columns: pet.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pet.FriendsTable,
			Columns: pet.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Pet{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
