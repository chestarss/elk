// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/chestarss/elk/internal/fridge/ent/migrate"

	"github.com/chestarss/elk/internal/fridge/ent/compartment"
	"github.com/chestarss/elk/internal/fridge/ent/fridge"
	"github.com/chestarss/elk/internal/fridge/ent/item"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Compartment is the client for interacting with the Compartment builders.
	Compartment *CompartmentClient
	// Fridge is the client for interacting with the Fridge builders.
	Fridge *FridgeClient
	// Item is the client for interacting with the Item builders.
	Item *ItemClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Compartment = NewCompartmentClient(c.config)
	c.Fridge = NewFridgeClient(c.config)
	c.Item = NewItemClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Compartment: NewCompartmentClient(cfg),
		Fridge:      NewFridgeClient(cfg),
		Item:        NewItemClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:      cfg,
		Compartment: NewCompartmentClient(cfg),
		Fridge:      NewFridgeClient(cfg),
		Item:        NewItemClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Compartment.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Compartment.Use(hooks...)
	c.Fridge.Use(hooks...)
	c.Item.Use(hooks...)
}

// CompartmentClient is a client for the Compartment schema.
type CompartmentClient struct {
	config
}

// NewCompartmentClient returns a client for the Compartment from the given config.
func NewCompartmentClient(c config) *CompartmentClient {
	return &CompartmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `compartment.Hooks(f(g(h())))`.
func (c *CompartmentClient) Use(hooks ...Hook) {
	c.hooks.Compartment = append(c.hooks.Compartment, hooks...)
}

// Create returns a create builder for Compartment.
func (c *CompartmentClient) Create() *CompartmentCreate {
	mutation := newCompartmentMutation(c.config, OpCreate)
	return &CompartmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Compartment entities.
func (c *CompartmentClient) CreateBulk(builders ...*CompartmentCreate) *CompartmentCreateBulk {
	return &CompartmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Compartment.
func (c *CompartmentClient) Update() *CompartmentUpdate {
	mutation := newCompartmentMutation(c.config, OpUpdate)
	return &CompartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompartmentClient) UpdateOne(co *Compartment) *CompartmentUpdateOne {
	mutation := newCompartmentMutation(c.config, OpUpdateOne, withCompartment(co))
	return &CompartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompartmentClient) UpdateOneID(id int) *CompartmentUpdateOne {
	mutation := newCompartmentMutation(c.config, OpUpdateOne, withCompartmentID(id))
	return &CompartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Compartment.
func (c *CompartmentClient) Delete() *CompartmentDelete {
	mutation := newCompartmentMutation(c.config, OpDelete)
	return &CompartmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CompartmentClient) DeleteOne(co *Compartment) *CompartmentDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CompartmentClient) DeleteOneID(id int) *CompartmentDeleteOne {
	builder := c.Delete().Where(compartment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompartmentDeleteOne{builder}
}

// Query returns a query builder for Compartment.
func (c *CompartmentClient) Query() *CompartmentQuery {
	return &CompartmentQuery{
		config: c.config,
	}
}

// Get returns a Compartment entity by its id.
func (c *CompartmentClient) Get(ctx context.Context, id int) (*Compartment, error) {
	return c.Query().Where(compartment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompartmentClient) GetX(ctx context.Context, id int) *Compartment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFridge queries the fridge edge of a Compartment.
func (c *CompartmentClient) QueryFridge(co *Compartment) *FridgeQuery {
	query := &FridgeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(compartment.Table, compartment.FieldID, id),
			sqlgraph.To(fridge.Table, fridge.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, compartment.FridgeTable, compartment.FridgeColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContents queries the contents edge of a Compartment.
func (c *CompartmentClient) QueryContents(co *Compartment) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(compartment.Table, compartment.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, compartment.ContentsTable, compartment.ContentsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CompartmentClient) Hooks() []Hook {
	return c.hooks.Compartment
}

// FridgeClient is a client for the Fridge schema.
type FridgeClient struct {
	config
}

// NewFridgeClient returns a client for the Fridge from the given config.
func NewFridgeClient(c config) *FridgeClient {
	return &FridgeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fridge.Hooks(f(g(h())))`.
func (c *FridgeClient) Use(hooks ...Hook) {
	c.hooks.Fridge = append(c.hooks.Fridge, hooks...)
}

// Create returns a create builder for Fridge.
func (c *FridgeClient) Create() *FridgeCreate {
	mutation := newFridgeMutation(c.config, OpCreate)
	return &FridgeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Fridge entities.
func (c *FridgeClient) CreateBulk(builders ...*FridgeCreate) *FridgeCreateBulk {
	return &FridgeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Fridge.
func (c *FridgeClient) Update() *FridgeUpdate {
	mutation := newFridgeMutation(c.config, OpUpdate)
	return &FridgeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FridgeClient) UpdateOne(f *Fridge) *FridgeUpdateOne {
	mutation := newFridgeMutation(c.config, OpUpdateOne, withFridge(f))
	return &FridgeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FridgeClient) UpdateOneID(id int) *FridgeUpdateOne {
	mutation := newFridgeMutation(c.config, OpUpdateOne, withFridgeID(id))
	return &FridgeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Fridge.
func (c *FridgeClient) Delete() *FridgeDelete {
	mutation := newFridgeMutation(c.config, OpDelete)
	return &FridgeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FridgeClient) DeleteOne(f *Fridge) *FridgeDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FridgeClient) DeleteOneID(id int) *FridgeDeleteOne {
	builder := c.Delete().Where(fridge.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FridgeDeleteOne{builder}
}

// Query returns a query builder for Fridge.
func (c *FridgeClient) Query() *FridgeQuery {
	return &FridgeQuery{
		config: c.config,
	}
}

// Get returns a Fridge entity by its id.
func (c *FridgeClient) Get(ctx context.Context, id int) (*Fridge, error) {
	return c.Query().Where(fridge.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FridgeClient) GetX(ctx context.Context, id int) *Fridge {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCompartments queries the compartments edge of a Fridge.
func (c *FridgeClient) QueryCompartments(f *Fridge) *CompartmentQuery {
	query := &CompartmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fridge.Table, fridge.FieldID, id),
			sqlgraph.To(compartment.Table, compartment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fridge.CompartmentsTable, fridge.CompartmentsColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FridgeClient) Hooks() []Hook {
	return c.hooks.Fridge
}

// ItemClient is a client for the Item schema.
type ItemClient struct {
	config
}

// NewItemClient returns a client for the Item from the given config.
func NewItemClient(c config) *ItemClient {
	return &ItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `item.Hooks(f(g(h())))`.
func (c *ItemClient) Use(hooks ...Hook) {
	c.hooks.Item = append(c.hooks.Item, hooks...)
}

// Create returns a create builder for Item.
func (c *ItemClient) Create() *ItemCreate {
	mutation := newItemMutation(c.config, OpCreate)
	return &ItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Item entities.
func (c *ItemClient) CreateBulk(builders ...*ItemCreate) *ItemCreateBulk {
	return &ItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Item.
func (c *ItemClient) Update() *ItemUpdate {
	mutation := newItemMutation(c.config, OpUpdate)
	return &ItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ItemClient) UpdateOne(i *Item) *ItemUpdateOne {
	mutation := newItemMutation(c.config, OpUpdateOne, withItem(i))
	return &ItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ItemClient) UpdateOneID(id int) *ItemUpdateOne {
	mutation := newItemMutation(c.config, OpUpdateOne, withItemID(id))
	return &ItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Item.
func (c *ItemClient) Delete() *ItemDelete {
	mutation := newItemMutation(c.config, OpDelete)
	return &ItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ItemClient) DeleteOne(i *Item) *ItemDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ItemClient) DeleteOneID(id int) *ItemDeleteOne {
	builder := c.Delete().Where(item.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ItemDeleteOne{builder}
}

// Query returns a query builder for Item.
func (c *ItemClient) Query() *ItemQuery {
	return &ItemQuery{
		config: c.config,
	}
}

// Get returns a Item entity by its id.
func (c *ItemClient) Get(ctx context.Context, id int) (*Item, error) {
	return c.Query().Where(item.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ItemClient) GetX(ctx context.Context, id int) *Item {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCompartment queries the compartment edge of a Item.
func (c *ItemClient) QueryCompartment(i *Item) *CompartmentQuery {
	query := &CompartmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(compartment.Table, compartment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, item.CompartmentTable, item.CompartmentColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ItemClient) Hooks() []Hook {
	return c.hooks.Item
}
