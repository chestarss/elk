// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/chestarss/elk/internal/fridge/ent/compartment"
	"github.com/chestarss/elk/internal/fridge/ent/fridge"
)

// Compartment is the model entity for the Compartment schema.
type Compartment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompartmentQuery when eager-loading is set.
	Edges               CompartmentEdges `json:"edges"`
	fridge_compartments *int
}

// CompartmentEdges holds the relations/edges for other nodes in the graph.
type CompartmentEdges struct {
	// Fridge holds the value of the fridge edge.
	Fridge *Fridge `json:"fridge,omitempty"`
	// Contents holds the value of the contents edge.
	Contents []*Item `json:"contents,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FridgeOrErr returns the Fridge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompartmentEdges) FridgeOrErr() (*Fridge, error) {
	if e.loadedTypes[0] {
		if e.Fridge == nil {
			// The edge fridge was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: fridge.Label}
		}
		return e.Fridge, nil
	}
	return nil, &NotLoadedError{edge: "fridge"}
}

// ContentsOrErr returns the Contents value or an error if the edge
// was not loaded in eager-loading.
func (e CompartmentEdges) ContentsOrErr() ([]*Item, error) {
	if e.loadedTypes[1] {
		return e.Contents, nil
	}
	return nil, &NotLoadedError{edge: "contents"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Compartment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case compartment.FieldID:
			values[i] = new(sql.NullInt64)
		case compartment.FieldName:
			values[i] = new(sql.NullString)
		case compartment.ForeignKeys[0]: // fridge_compartments
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Compartment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Compartment fields.
func (c *Compartment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case compartment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case compartment.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case compartment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field fridge_compartments", value)
			} else if value.Valid {
				c.fridge_compartments = new(int)
				*c.fridge_compartments = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryFridge queries the "fridge" edge of the Compartment entity.
func (c *Compartment) QueryFridge() *FridgeQuery {
	return (&CompartmentClient{config: c.config}).QueryFridge(c)
}

// QueryContents queries the "contents" edge of the Compartment entity.
func (c *Compartment) QueryContents() *ItemQuery {
	return (&CompartmentClient{config: c.config}).QueryContents(c)
}

// Update returns a builder for updating this Compartment.
// Note that you need to call Compartment.Unwrap() before calling this method if this Compartment
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Compartment) Update() *CompartmentUpdateOne {
	return (&CompartmentClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Compartment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Compartment) Unwrap() *Compartment {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Compartment is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Compartment) String() string {
	var builder strings.Builder
	builder.WriteString("Compartment(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Compartments is a parsable slice of Compartment.
type Compartments []*Compartment

func (c Compartments) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
